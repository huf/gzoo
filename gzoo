#!/usr/bin/env perl
use strict;
use warnings;

use Fcntl;

our $VERSION = '2.9.KECSKE.0-seriously?';

if (@ARGV) {
	die "$0 v$VERSION\n" if $ARGV[0] eq '--version';

	if (my ($d) = $ARGV[0] =~ /\A-([vxi])\z/i) {
		print map { lc $d eq $d ? $_ : uc $_ } {v => "five", x => "ten", i => "one"}->{lc $d};
		print "\n";
		exit 50;
	}

	if ($ARGV[0] eq '--help' || $ARGV[0] eq '-h') {
		print <<"HALP";
$0 [OPTIONS] <COMMAND> [ARGS]
	now go away.
HALP
		exit 0x68;
	}

	if ($ARGV[0] eq '--cat') {
		print <<'MEOW';
THE PROGRAM IS NOW A GIANT CAT!
                      _
                      \`*-.
                       )  _`-.
                      .  : `. .
                      : _   '  \
                      ; *` _.   `*-._
                      `-.-'          `-.
 _._     _,-'""`-._      ;       `       `.
(,-.`._,'(       |\`-/|  :.       .        \
    `-.-' \ )-`( , o o)  . \  .   :   .-'   .
          `-    \`_`"'-  '  `+.;  ;  '      :
                        :  '  |    ;       ;-.
                        ; '   : :`-:     _.`* ;
                     .*' /  .*' ; .*`- +'  `*'
                     `*-*   `*-*  `*-*'

SEE WHAT YOU DID TO SCARED KITTY?
MEOW
		exit 9;
	}

	if ($ARGV[0] eq '--goat' || $ARGV[0] eq '--kecske') {
		print <<'WHAT_DOES_IT_SAY';
KECS
      /)  (\
 )\.:::::::::./(
 \( o       o )/
   '-./ / _.-'`-.
    ( oo  ) / _  \
    |'--'/\/ ( \  \
     \''/  \| \ \  \
      ww   |  '  )  \
           |.' .'   |
          .' .'==|==|
         / .'\    [_]
      .-(/\) |     /
     /.-"""'/|    |
     ||    / |    |
     //   |  |    |
     ||   |__|___/
     \\   [__[___]
     // .-'.-'  (
     ||(__(__.-._)
KE
WHAT_DOES_IT_SAY
		exit 2;
	}
}

for my $arg (@ARGV) {
	if (my ($ext) = $arg =~ /\.(gz|bz2)\z/ and -f $arg) {
		$ext =~ s/z/zip/;
		$arg = fork_to_zip($arg, $ext);
	}
}

exec @ARGV;
exit 1;

my %PIPES;
sub fork_to_zip {
	my ($z_fn, $cmd) = @_;

	pipe my $read, my $write
		or die "cannot pipe: $!\n";

	for ($read, $write) {
		my $f = fcntl $_, F_GETFD, 0
			or die "cannot fcntl-get: $!\n";

		fcntl $_, F_SETFD, $f&~FD_CLOEXEC
			or die "cannot fcntl-unset FD_CLOEXEC: $!\n";
	}

	my $pid = fork;
	die "cannot fork: $!\n" unless defined $pid;

	if ($pid) {
		$PIPES{$pid} = $read; # protect from gc
		return '/proc/self/fd/'.fileno($read);
	}

	open STDOUT, '>&', $write
		or die "cannot dup pipe to STDOUT: $!\n";

	exec $cmd, '-cd', $z_fn;
	exit 1;
}
