#!/usr/bin/env perl
use strict;
use warnings;

use Fcntl;

if (@ARGV && $ARGV[0] eq '--cat') {
	print <<'EOS';
THE PROGRAM IS NOW A GIANT CAT!
                      _
                      \`*-.
                       )  _`-.
                      .  : `. .
                      : _   '  \
                      ; *` _.   `*-._
                      `-.-'          `-.
 _._     _,-'""`-._      ;       `       `.
(,-.`._,'(       |\`-/|  :.       .        \
    `-.-' \ )-`( , o o)  . \  .   :   .-'   .
          `-    \`_`"'-  '  `+.;  ;  '      :
                        :  '  |    ;       ;-.
                        ; '   : :`-:     _.`* ;
                     .*' /  .*' ; .*`- +'  `*'
                     `*-*   `*-*  `*-*'

SEE WHAT YOU DID TO SCARED KITTY?
EOS
	exit 9;
}

for my $arg (@ARGV) {
	if ($arg =~ /\.gz\z/ && -f $arg) {
		$arg = fork_to_gzip($arg);
	}
}

exec @ARGV;
exit 1;

my %PIPES;
sub fork_to_gzip {
	my ($gz_fn) = @_;

	pipe my $read, my $write
		or die "cannot pipe: $!\n";

	for ($read, $write) {
		my $f = fcntl $_, F_GETFD, 0
			or die "cannot fcntl-get: $!\n";

		fcntl $_, F_SETFD, $f&~FD_CLOEXEC
			or die "cannot fcntl-unset FD_CLOEXEC: $!\n";
	}

	my $pid = fork;
	die "cannot fork: $!\n" unless defined $pid;
	if ($pid) {
		$PIPES{$pid} = $read; # protect from gc
		return '/proc/self/fd/'.fileno($read);
	}

	open STDOUT, '>&', $write
		or die "cannot dup pipe to STDOUT: $!\n";

	exec qw/gzip -cd/, $gz_fn;
	exit 1;
}
